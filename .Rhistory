x_j = v[[i-1]] + 2/(v[[i-1]])
v <-c(v,x_j)
}
}
return(v)
}
testLoop(3)
testLoop2 <- function(yVec){
n <- length(yVec)
result <- sum(e^(1:n))
return(result)
}
testLoop2(3)
?exp
testLoop2 <- function(yVec){
n <- length(yVec)
result <- sum(exp(1:n))
return(result)
}
testLoop2(3)
sum(exp(1:3))
quadmap <- function(start,rho,niter){
result <-c(rho*start*(1-start))
for (i in niter){
if (i==1){
next
}
else{
result <-c(rho*result[i-1]*(1-result[i-1]))
}
}
return(result)
}
tmp <- quadmap(start=0.95, rho=2.99, niter=500)
tmp
quadmap(start=0.95, rho=2.99, niter=500)
quadmap <- function(start,rho,niter){
result <-c(rho*start*(1-start))
for (i in niter){
if (i==1){
next
}
else{
result <-c(rho*result[[i-1]]*(1-result[[i-1]]))
}
}
return(result)
}
quadmap(start=0.95, rho=2.99, niter=500)
ntier
niter
quadmap <- function(start,rho,niter){
result <-c(rho*start*(1-start))
for (i in 1:niter){
if (i==1){
next
}
else{
print(i)
result <-c(rho*result[[i-1]]*(1-result[[i-1]]))
}
}
return(result)
}
quadmap(start=0.95, rho=2.99, niter=500)
quadmap <- function(start,rho,niter){
result <-c(rho*start*(1-start))
for (i in 1:niter){
if (i==1){
next
}
else{
print(i)
print(result)
result <-c(rho*result[i-1]*(1-result[i-1]))
}
}
return(result)
}
quadmap(start=0.95, rho=2.99, niter=500)
quadmap <- function(start,rho,niter){
result <-c(rho*start*(1-start))
for (i in 1:niter){
if (i==1){
next
}
else{
print(i)
print(result)
result <-c(result,rho*result[i-1]*(1-result[i-1]))
}
}
return(result)
}
quadmap(start=0.95, rho=2.99, niter=500)
fun1 <- function(start,rho){
for (i in 1:100){
check = start + 0.02
if (check >= rho){
return(i)
}
}
}
fun1(0.95,2.99)
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
for (i in 1:100){
print(check)
check = start + 0.02
if (check >= rho){
print(i)
return(i)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
for (i in 1:100){
check = start + 0.02
print(check)
if (check >= rho){
print(i)
return(i)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
for (i in 1:100){
check = check + 0.02
print(check)
if (check >= rho){
print(i)
return(i)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
for (i in 1:100){
check = check + 0.02
print(check)
count = count + 1
if (check >= rho){
print(i)
return(count)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
for (i in 1:100){
check = check + 0.02
print(check)
count = count + 1
if (check >= rho){
print(i)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
for (i in 1:100){
check = check + 0.02
count = count + 1
if (check >= rho){
print(check)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
for (i in 1:100){
check = check + 0.02
count = count + 1
print(i)
if (check >= rho){
print(check)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
for (i in 1:200){
check = check + 0.02
count = count + 1
print(i)
if (check >= rho){
print(check)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
for (i in 1:200){
check = check + 0.02
count = count + 1
if (check >= rho){
print(check)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
distance = start-rho
for (i in 1:200){
check = check + 0.01
count = count + 1
if (distance <= rho){
print(check)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
distance = start-rho
print(distance)
for (i in 1:200){
check = check + 0.01
count = count + 1
if (distance <= rho){
print(check)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
distance = abs(start-rho)
print(distance)
for (i in 1:200){
check = check + 0.01
count = count + 1
if (distance <= 0.02){
print(check)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
distance = abs(start-rho)
print(distance)
for (i in 1:200){
distance = distance - 0.01
count = count + 1
if (distance <= 0.02){
print(check)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
distance = abs(start-rho)
print(distance)
for (i in 1:200){
distance = distance - 0.01
print(distance)
count = count + 1
if (distance <= 0.02){
print(check)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
distance = abs(start-rho)
print(distance)
for (i in 1:200){
distance = distance - 0.01
print(distance)
count = count + 1
print(count)
if (distance <= 0.02){
print(check)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
fun1 <- function(start,rho){
check = start
count = 0
distance = abs(start-rho)
print(distance)
for (i in 1:300){
distance = distance - 0.02
print(distance)
count = count + 1
print(count)
if (distance <= 0.02){
print(check)
print(count)
return(count)
}
}
}
print(fun1(0.95,2.99))
xVect <- seq(from = 2, to = 56, by = 3)
tempFn<- function(xVect){
m  = mean(xVect)
n = length(xVect)
r1 <- (sum(((2:n)-m) * (xVect[1])-mean))/(sum((1:n)-mean)^2)
r2 <- (sum(((3:n)-m) * (xVect[1])-mean))/(sum((2:n)-mean)^2)
print(r1,r2)
}
xVect
tempFn(xVect)
tempFn<- function(xVect){
m  = mean(xVect)
n = length(xVect)
r1 <- (sum(((2:n)-m) * (xVect[1])-m))/(sum((1:n)-m)^2)
r2 <- (sum(((3:n)-m) * (xVect[1])-m))/(sum((2:n)-m)^2)
print(r1,r2)
}
tempFn(xVect)
?sapply
knitr::opts_chunk$set(echo = TRUE)
tmpFn1 <- function(xVec){
return(xVec^(1:length(xVec)))
}
## simple example
a <- c(2, 5, 3, 8, 2, 4)
b <- tmpFn1(a)
b
tmpFn2 <- function(xVec2){
n = length(xVec2)
return(xVec2^(1:n)/(1:n))
}
c <- tmpFn2(a)
c
tmpFn3 <- function(x,n){
nVect = 1:n
return(1 + sum(x^(nVect)/(nVect)))
}
c <- tmpFn3(2,5)
c
tmpFn <- function(x){
num = colSums(matrix(x,nrow = 3))
denom = 3
return(num/denom)
}
c <- tmpFn((c(1:5,6:1)))
c
x1 <- seq(from = -3, to = 0, length.out = 10)
x2 <- seq(from = 0, to = 2, length.out = 10)
x3 <- seq(from = 2, to = 3, length.out = 10)
y1 <- x1^2 + 2*x1 + 3
y2 <- x2 + 3
y3 <- x3^2 + 4*x3 -7
tmpFn <- function(x){
#function 1
plot(x1,y1,type = 'l',xlim=c(-3, 3), ylim=c(0, 15))
par(new = TRUE)
#function 2
plot(x2,y2,type = 'l', axes = FALSE ,xlim=c(-3, 3), ylim=c(0, 15))
par(new = TRUE)
#function 3
plot(x3,y3,type = 'l', axes = FALSE ,xlim=c(-3, 3), ylim=c(0, 15))
}
tmpFn(x)
A = matrix(c(1,5,2,1,2,-1,3,6,-3),nrow = 3,ncol=3)
A
A <- ifelse(A %% 2 !=0,A*2,A)
A
tmpFn <- function(n,k){
matE <- matrix(rep(0,n*n), nrow = n, byrow = TRUE)
matE[abs(row(matE)-col(matE))==1] <- 1
matE
diag(matE) <- k
matE
}
tmpFn(5,2)
quadrant <- function(alpha){
if(alpha < 90){
print('quadrant 1')
}
if(alpha > 90 && alpha <= 180){
print('quadrant 2')
}
if(alpha > 180 && alpha <= 270){
print('quadrant 3')
}
if(alpha > 270 && alpha <= 360){
print('quadrant 4')
}
}
quadrant(87)
weekday <- function(day,month,year){
y <- year%%100
c <- substr(year,1, nchar(year)-2)
y <- as.numeric(y)
c <- as.numeric(c)
result <- ((2.6*month-0.2) + day + year + (y/4) + (c/4)-2*c )%%7
if(result == 1){
print('Sunday')
}
if(result == 2){
print('Monday')
}
if(result == 3){
print('Tuesday')
}
if(result == 4){
print('Wednesday')
}
if(result == 5){
print('Thursday')
}
if(result == 6){
print('Friday')
}
if(result == 7){
print('Saturday')
}
}
weekday(1,2,2018)
x <- c(1:5)
y <- c(2,2,2,2,2)
z <- c(2018,2018,2018,2018,2018)
weekday(x,y,z)
testLoop <- function(n){
v <- c(1,2)
for (i in n){
if (i == 0){
#v <- seq(v, 1)
print(v)
next
}
if(i == 1){
#v <-seq(v,2)
print(v)
next
}
else{
x_j = v[[i-1]] + 2/(v[[i-1]])
v <-c(v,x_j)
}
}
return(v)
}
testLoop2 <- function(yVec){
n <- length(yVec)
result <- sum(exp(1:n))
print(result)
return(result)
}
quadmap <- function(start,rho,niter){
result <-c(rho*start*(1-start))
for (i in 1:niter){
if (i==1){
next
}
else{
print(i)
print(result)
result <-c(result,rho*result[i-1]*(1-result[i-1]))
}
}
return(result)
}
tmp <- quadmap(start=0.95, rho=2.99, niter=500)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Desktop/assignment-3")
setwd("~/Desktop/assignment-3")
shiny::runApp()
